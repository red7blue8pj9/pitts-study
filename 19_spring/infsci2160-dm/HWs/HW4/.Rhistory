telcustomer_train_tbl <- training(telcustomer_train_test_split)
telcustomer_test_tbl <- testing(telcustomer_train_test_split)
# use cross-validation with random forest
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn, cv.fold = 5, step = .5)
with(telcustomer_cvrf, plot(n.var, error.cv, log="x", type="o", lwd=2,
xlab="Number of Variables", ylab="Error Rate"))
telcustomer_var_importance <- data.frame(importance(telcustomer_rf))
telcustomer_var_importance
varImpPlot(telcustomer_cvrf)
# split dataset into train and test partitions
telcustomer_train_test_split <- initial_split(telcustomer_cl,0.8)
telcustomer_train_tbl <- training(telcustomer_train_test_split)
telcustomer_test_tbl <- testing(telcustomer_train_test_split)
varImpPlot(telcustomer_cvrf)
# split dataset into train and test partitions
telcustomer_train_test_split <- initial_split(telcustomer_cl,0.8)
telcustomer_train_tbl <- training(telcustomer_train_test_split)
telcustomer_test_tbl <- testing(telcustomer_train_test_split)
# use cross-validation with random forest
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn, cv.fold = 5, step = .5)
varImpPlot(telcustomer_cvrf)
# split dataset into train and test partitions
telcustomer_train_test_split <- initial_split(telcustomer_cl,0.8)
telcustomer_train_tbl <- training(telcustomer_train_test_split)
telcustomer_test_tbl <- testing(telcustomer_train_test_split)
# use cross-validation with random forest
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn, cv.fold = 5, step = .5)
# split dataset into train and test partitions
telcustomer_train_test_split <- initial_split(telcustomer_cl,0.8)
telcustomer_train_tbl <- training(telcustomer_train_test_split)
telcustomer_test_tbl <- testing(telcustomer_train_test_split)
# use cross-validation with random forest
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn, cv.fold = 5, step = .5)
with(telcustomer_cvrf, plot(n.var, error.cv, log="x", type="o", lwd=2,
xlab="Number of Variables", ylab="Error Rate"))
telcustomer_var_importance <- data.frame(importance(telcustomer_cvrf))
# split dataset into train and test partitions
telcustomer_train_test_split <- initial_split(telcustomer_cl,0.8)
telcustomer_train_tbl <- training(telcustomer_train_test_split)
telcustomer_test_tbl <- testing(telcustomer_train_test_split)
# use cross-validation with random forest
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn, cv.fold = 5, step = .5)
with(telcustomer_cvrf, plot(n.var, error.cv, log="x", type="o", lwd=2,
xlab="Number of Variables", ylab="Error Rate"))
#telcustomer_var_importance <- data.frame(importance(telcustomer_cvrf))
#telcustomer_var_importance
# split dataset into train and test partitions
telcustomer_train_test_split <- initial_split(telcustomer_cl,0.8)
telcustomer_train_tbl <- training(telcustomer_train_test_split)
telcustomer_test_tbl <- testing(telcustomer_train_test_split)
# run random forest model on training data
telcustomer_rf <- randomForest(formula = Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data = telcustomer_train_tbl, importance = TRUE, ntree = 50)
telcustomer_var_importance <- data.frame(importance(telcustomer_rf))
telcustomer_var_importance
varImpPlot(telcustomer_rf)
# cross-validation
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn, cv.fold = 5, step = .5)
with(boston_crossval, plot(n.var, error.cv, log="x", type="o", lwd=2,
xlab="Number of Variables", ylab="Error Rate"))
# split dataset into train and test partitions
telcustomer_train_test_split <- initial_split(telcustomer_cl,0.8)
telcustomer_train_tbl <- training(telcustomer_train_test_split)
telcustomer_test_tbl <- testing(telcustomer_train_test_split)
# run random forest model on training data
telcustomer_rf <- randomForest(formula = Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data = telcustomer_train_tbl, importance = TRUE, ntree = 50)
telcustomer_var_importance <- data.frame(importance(telcustomer_rf))
telcustomer_var_importance
varImpPlot(telcustomer_rf)
# cross-validation
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn, cv.fold = 5, step = .5)
with(telcustomer_cvrf, plot(n.var, error.cv, log="x", type="o", lwd=2,
xlab="Number of Variables", ylab="Error Rate"))
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn, cv.fold = 10, step = .5)
with(telcustomer_cvrf, plot(n.var, error.cv, log="x", type="o", lwd=2,
xlab="Number of Variables", ylab="Error Rate"))
library(dplyr)
library(ggplot2)
library(pROC)
library(rsample)
library(MASS)
library(e1071)
library(randomForest)
# import dataset
telcustomer<- read.csv("~/Dropbox/19 Spring/INFSCI_2160_DM/HWs/HW4/WA_Fn-UseC_-Telco-Customer-Churn.csv")
# summary of dataset
summary(telcustomer)
sum(is.na(telcustomer))
# clearly there is some null values, but it is not too much, therefore, we just simply remove it from dataset
telcustomer_cl <- na.omit(telcustomer)
summary(telcustomer_cl)
# Decision Tree
telcustomer_train_dtree <- tree(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data=telcustomer_train_tbl)
library(dplyr)
library(ggplot2)
library(pROC)
library(tree)
install.packages("tree")
library(dplyr)
library(ggplot2)
library(pROC)
library(tree)
library(rsample)
library(MASS)
library(e1071)
library(randomForest)
# import dataset
telcustomer<- read.csv("~/Dropbox/19 Spring/INFSCI_2160_DM/HWs/HW4/WA_Fn-UseC_-Telco-Customer-Churn.csv")
# summary of dataset
summary(telcustomer)
sum(is.na(telcustomer))
# clearly there is some null values, but it is not too much, therefore, we just simply remove it from dataset
telcustomer_cl <- na.omit(telcustomer)
summary(telcustomer_cl)
# Decision Tree
telcustomer_train_dtree <- tree(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data=telcustomer_train_tbl)
library(dplyr)
library(ggplot2)
library(pROC)
library(tree)
library(rsample)
library(MASS)
library(e1071)
library(randomForest)
# import dataset
telcustomer<- read.csv("~/Dropbox/19 Spring/INFSCI_2160_DM/HWs/HW4/WA_Fn-UseC_-Telco-Customer-Churn.csv")
# summary of dataset
summary(telcustomer)
sum(is.na(telcustomer))
# clearly there is some null values, but it is not too much, therefore, we just simply remove it from dataset
telcustomer_cl <- na.omit(telcustomer)
summary(telcustomer_cl)
# split dataset into train and test partitions
telcustomer_train_test_split <- initial_split(telcustomer_cl,0.8)
telcustomer_train_tbl <- training(telcustomer_train_test_split)
telcustomer_test_tbl <- testing(telcustomer_train_test_split)
# run random forest model on training data
telcustomer_rf <- randomForest(formula = Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data = telcustomer_train_tbl, importance = TRUE, ntree = 50)
telcustomer_var_importance <- data.frame(importance(telcustomer_rf))
telcustomer_var_importance
varImpPlot(telcustomer_rf)
# cross-validation
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn, cv.fold = 5, step = .5)
with(telcustomer_cvrf, plot(n.var, error.cv, log="x", type="o", lwd=2,
xlab="Number of Variables", ylab="Error Rate"))
# Decision Tree
telcustomer_train_dtree <- tree(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data=telcustomer_train_tbl)
summary(telcustomer_train_dtree)
# Decision Tree
telcustomer_train_dtree <- tree(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data=telcustomer_train_tbl)
summary(telcustomer_train_dtree)
# plot
plot(telcustomer_train_dtree)
# Decision Tree
telcustomer_train_dtree <- tree(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data=telcustomer_train_tbl)
summary(telcustomer_train_dtree)
# plot
plot(telcustomer_train_dtree)
text(telcustomer_train_dtree,cex=0.75)
# Decision Tree
telcustomer_train_dtree <- tree(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data=telcustomer_train_tbl)
summary(telcustomer_train_dtree)
# plot
plot(telcustomer_train_dtree)
text(telcustomer_train_dtree,cex=0.75)
# tree prune
telcustomer_train_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5)
summary(telcustomer_train_dtree_pruned)
# Decision Tree
telcustomer_train_dtree <- tree(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data=telcustomer_train_tbl)
summary(telcustomer_train_dtree)
# plot
plot(telcustomer_train_dtree)
text(telcustomer_train_dtree,cex=0.75)
# tree prune
telcustomer_train_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5)
summary(telcustomer_train_dtree_pruned)
# test
telcustomer_test_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5, newdata = telcustomer_test_tbl)
telcustomer_test_dtree_pruned
# Decision Tree
telcustomer_train_dtree <- tree(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data=telcustomer_train_tbl)
summary(telcustomer_train_dtree)
# plot
plot(telcustomer_train_dtree)
text(telcustomer_train_dtree,cex=0.75)
# tree prune
telcustomer_train_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5)
summary(telcustomer_train_dtree_pruned)
# test
telcustomer_test_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5, newdata = telcustomer_test_tbl)
telcustomer_test_dtree_pruned
telcustomer_test_dtree_seq = prune.tree(hitter_dtree)
# Decision Tree
telcustomer_train_dtree <- tree(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data=telcustomer_train_tbl)
summary(telcustomer_train_dtree)
# plot
plot(telcustomer_train_dtree)
text(telcustomer_train_dtree,cex=0.75)
# tree prune
telcustomer_train_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5)
summary(telcustomer_train_dtree_pruned)
# test
telcustomer_test_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5, newdata = telcustomer_test_tbl)
telcustomer_test_dtree_pruned
telcustomer_test_dtree_seq = prune.tree(telcustomer_train_dtree)
plot(telcustomer_test_dtree_seq)
# Decision Tree
telcustomer_train_dtree <- tree(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data=telcustomer_train_tbl)
summary(telcustomer_train_dtree)
# plot
plot(telcustomer_train_dtree)
text(telcustomer_train_dtree,cex=0.75)
# tree prune
telcustomer_train_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5)
summary(telcustomer_train_dtree_pruned)
# test
telcustomer_test_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5, newdata = telcustomer_test_tbl)
telcustomer_test_dtree_pruned
telcustomer_test_dtree_seq = prune.tree(telcustomer_train_dtree)
plot(telcustomer_test_dtree_seq)
#
telcustomer_test_dtree_seq$dev
# Decision Tree
telcustomer_train_dtree <- tree(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data=telcustomer_train_tbl)
summary(telcustomer_train_dtree)
# plot
plot(telcustomer_train_dtree)
text(telcustomer_train_dtree,cex=0.75)
# tree prune
telcustomer_train_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5)
summary(telcustomer_train_dtree_pruned)
# test
telcustomer_test_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5, newdata = telcustomer_test_tbl)
telcustomer_test_dtree_pruned
telcustomer_test_dtree_seq = prune.tree(telcustomer_train_dtree)
plot(telcustomer_test_dtree_seq)
# also vectorize the error rates for prunings
telcustomer_test_dtree_seq$dev
# find the size of the optimal trees with respect to MSE:
telcustomer_test_dtree_optimal <- which(telcustomer_test_dtree_seq$dev == min(telcustomer_test_dtree_seq$dev))
best_num_of_leaves <- min(telcustomer_test_dtree_seq$size[telcustomer_test_dtree_optimal])
best_num_of_leaves
# Decision Tree
telcustomer_train_dtree <- tree(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data=telcustomer_train_tbl)
summary(telcustomer_train_dtree)
# plot
plot(telcustomer_train_dtree)
text(telcustomer_train_dtree,cex=0.75)
# tree prune
telcustomer_train_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5)
summary(telcustomer_train_dtree_pruned)
# test
telcustomer_test_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5, newdata = telcustomer_test_tbl)
telcustomer_test_dtree_pruned
telcustomer_test_dtree_seq = prune.tree(telcustomer_train_dtree)
plot(telcustomer_test_dtree_seq)
# also vectorize the error rates for prunings
telcustomer_test_dtree_seq$dev
# find the size of the optimal trees with respect to MSE:
telcustomer_test_dtree_optimal <- which(telcustomer_test_dtree_seq$dev == min(telcustomer_test_dtree_seq$dev))
best_num_of_leaves <- min(telcustomer_test_dtree_seq$size[telcustomer_test_dtree_optimal])
best_num_of_leaves
# final tree
telcustomer_train_dtree_final <- prune.tree(telcustomer_train_dtree, best = best_num_of_leaves)
summary(telcustomer_train_dtree_final)
# test on new prune tree
telcustomer_test_dtree_pruned_7 <- prune.tree(telcustomer_train_dtree, best = best_num_of_leaves, newdata = telcustomer_test_tbl)
summary(telcustomer_test_dtree_pruned_7)
library(dplyr)
library(ggplot2)
library(pROC)
library(tree)
library(rsample)
library(MASS)
library(e1071)
library(randomForest)
# import dataset
telcustomer<- read.csv("~/Dropbox/19 Spring/INFSCI_2160_DM/HWs/HW4/WA_Fn-UseC_-Telco-Customer-Churn.csv")
# summary of dataset
summary(telcustomer)
sum(is.na(telcustomer))
# clearly there is some null values, but it is not too much, therefore, we just simply remove it from dataset
telcustomer_cl <- na.omit(telcustomer)
summary(telcustomer_cl)
# split dataset into train and test partitions
telcustomer_train_test_split <- initial_split(telcustomer_cl,0.8)
telcustomer_train_tbl <- training(telcustomer_train_test_split)
telcustomer_test_tbl <- testing(telcustomer_train_test_split)
# run random forest model on training data
telcustomer_rf <- randomForest(formula = Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data = telcustomer_train_tbl, importance = TRUE, ntree = 50)
telcustomer_var_importance <- data.frame(importance(telcustomer_rf))
telcustomer_var_importance
varImpPlot(telcustomer_rf)
# cross-validation
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn, cv.fold = 5, step = .5)
# SVM
telcustomer_train_svm_fit <- svm(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, probability = TRUE, data = telcustomer_train_tbl)
# SVM
telcustomer_train_svm_fit <- svm(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, probability = TRUE, data = telcustomer_train_tbl)
# summary
telcustomer_train_svm_fit
summary(telcustomer_train_svm_fit)
# SVM
telcustomer_train_svm_fit <- svm(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, probability = TRUE, data = telcustomer_train_tbl)
# summary
telcustomer_train_svm_fit
summary(telcustomer_train_svm_fit)
telcustomer_train_svm_pred <- predict(telcustomer_train_svm_fit, telcustomer_train_tbl, probability = TRUE)
telcustomer_train_svm_prob <- data.frame(attr(telcustomer_train_svm_pred, "probabilities"))
#Evaluate AUC & ROC
svm_train_roc <- roc(telcustomer_train_tbl$Churn, telcustomer_train_svm_prob$X1)
View(telcustomer_train_svm_prob)
View(telcustomer_train_tbl)
View(telcustomer_train_svm_prob)
View(telcustomer_train_svm_prob)
View(telcustomer_train_svm_fit)
View(telcustomer_train_tbl)
View(telcustomer_train_tbl)
# SVM
telcustomer_train_svm_fit <- svm(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, probability = TRUE, data = telcustomer_train_tbl)
# summary
telcustomer_train_svm_fit
summary(telcustomer_train_svm_fit)
telcustomer_train_svm_pred <- predict(telcustomer_train_svm_fit, telcustomer_train_tbl, probability = TRUE)
telcustomer_train_svm_prob <- data.frame(attr(telcustomer_train_svm_pred, "probabilities"))
telcustomer_train_svm_prob$Result <- ifelse(telcustomer_train_svm_prob$No > telcustomer_train_svm_prob$Yes, "No", "Yes")
#Evaluate AUC & ROC
svm_train_roc <- roc(telcustomer_train_tbl$Churn, telcustomer_train_svm_prob$X1)
# SVM
telcustomer_train_svm_fit <- svm(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, probability = TRUE, data = telcustomer_train_tbl)
# summary
telcustomer_train_svm_fit
summary(telcustomer_train_svm_fit)
telcustomer_train_svm_pred <- predict(telcustomer_train_svm_fit, telcustomer_train_tbl, probability = TRUE)
telcustomer_train_svm_prob <- data.frame(attr(telcustomer_train_svm_pred, "probabilities"))
telcustomer_train_svm_prob$Result <- ifelse(telcustomer_train_svm_prob$No > telcustomer_train_svm_prob$Yes, "No", "Yes")
#Evaluate AUC & ROC
svm_train_roc <- roc(telcustomer_train_tbl$Churn, telcustomer_train_svm_prob$Result)
library(dplyr)
library(ggplot2)
library(pROC)
library(tree)
library(rsample)
library(MASS)
library(e1071)
library(randomForest)
# import dataset
telcustomer<- read.csv("~/Dropbox/19 Spring/INFSCI_2160_DM/HWs/HW4/WA_Fn-UseC_-Telco-Customer-Churn.csv")
# summary of dataset
summary(telcustomer)
sum(is.na(telcustomer))
# clearly there is some null values, but it is not too much, therefore, we just simply remove it from dataset
telcustomer_cl <- na.omit(telcustomer)
summary(telcustomer_cl)
# transfter target variable into numeric for later examination
telcustomer_cl$Churn <- ifelse(telcustomer_cl$Churn="Yes",1,0)
library(dplyr)
library(ggplot2)
library(pROC)
library(tree)
library(rsample)
library(MASS)
library(e1071)
library(randomForest)
# import dataset
telcustomer<- read.csv("~/Dropbox/19 Spring/INFSCI_2160_DM/HWs/HW4/WA_Fn-UseC_-Telco-Customer-Churn.csv")
# summary of dataset
summary(telcustomer)
sum(is.na(telcustomer))
# clearly there is some null values, but it is not too much, therefore, we just simply remove it from dataset
telcustomer_cl <- na.omit(telcustomer)
summary(telcustomer_cl)
# transfter target variable into numeric for later examination
telcustomer_cl$Churn <- ifelse(telcustomer_cl$Churn=="Yes",1,0)
library(dplyr)
library(ggplot2)
library(pROC)
library(tree)
library(rsample)
library(MASS)
library(e1071)
library(randomForest)
# import dataset
telcustomer<- read.csv("~/Dropbox/19 Spring/INFSCI_2160_DM/HWs/HW4/WA_Fn-UseC_-Telco-Customer-Churn.csv")
# summary of dataset
summary(telcustomer)
sum(is.na(telcustomer))
# clearly there is some null values, but it is not too much, therefore, we just simply remove it from dataset
telcustomer_cl <- na.omit(telcustomer)
summary(telcustomer_cl)
# transfter target variable into numeric for later examination
telcustomer_cl$Churn <- ifelse(telcustomer_cl$Churn=="Yes",1,0)
summary(telcustomer_cl)
library(dplyr)
library(ggplot2)
library(pROC)
library(tree)
library(rsample)
library(MASS)
library(e1071)
library(randomForest)
# import dataset
telcustomer<- read.csv("~/Dropbox/19 Spring/INFSCI_2160_DM/HWs/HW4/WA_Fn-UseC_-Telco-Customer-Churn.csv")
# summary of dataset
summary(telcustomer)
sum(is.na(telcustomer))
# clearly there is some null values, but it is not too much, therefore, we just simply remove it from dataset
telcustomer_cl <- na.omit(telcustomer)
# transfter target variable into numeric for later examination
telcustomer_cl$Churn <- ifelse(telcustomer_cl$Churn=="Yes",1,0)
summary(telcustomer_cl)
library(dplyr)
library(ggplot2)
library(pROC)
library(tree)
library(rsample)
library(MASS)
library(e1071)
library(randomForest)
# import dataset
telcustomer<- read.csv("~/Dropbox/19 Spring/INFSCI_2160_DM/HWs/HW4/WA_Fn-UseC_-Telco-Customer-Churn.csv")
# summary of dataset
summary(telcustomer)
sum(is.na(telcustomer))
# clearly there is some null values, but it is not too much, therefore, we just simply remove it from dataset
telcustomer_cl <- na.omit(telcustomer)
# transfter target variable into numeric for later examination
telcustomer_cl$Churn <- ifelse(telcustomer_cl$Churn=="Yes",1,0)
summary(telcustomer_cl)
# split dataset into train and test partitions
telcustomer_train_test_split <- initial_split(telcustomer_cl,0.8)
telcustomer_train_tbl <- training(telcustomer_train_test_split)
telcustomer_test_tbl <- testing(telcustomer_train_test_split)
# run random forest model on training data
telcustomer_rf <- randomForest(formula = Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data = telcustomer_train_tbl, importance = TRUE, ntree = 50)
telcustomer_var_importance <- data.frame(importance(telcustomer_rf))
telcustomer_var_importance
varImpPlot(telcustomer_rf)
# cross-validation
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn, cv.fold = 5, step = .5)
with(telcustomer_cvrf, plot(n.var, error.cv, log="x", type="o", lwd=2,
xlab="Number of Variables", ylab="Error Rate"))
# Decision Tree
telcustomer_train_dtree <- tree(Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data=telcustomer_train_tbl)
summary(telcustomer_train_dtree)
# plot
plot(telcustomer_train_dtree)
text(telcustomer_train_dtree,cex=0.75)
# tree prune
telcustomer_train_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5)
summary(telcustomer_train_dtree_pruned)
# test
telcustomer_test_dtree_pruned <- prune.tree(telcustomer_train_dtree, best = 5, newdata = telcustomer_test_tbl)
telcustomer_test_dtree_pruned
telcustomer_test_dtree_seq = prune.tree(telcustomer_train_dtree)
plot(telcustomer_test_dtree_seq)
# run random forest model on training data
telcustomer_rf <- randomForest(formula = Churn ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data = telcustomer_train_tbl, importance = TRUE, ntree = 50)
telcustomer_var_importance <- data.frame(importance(telcustomer_rf))
telcustomer_var_importance
varImpPlot(telcustomer_rf)
# cross-validation
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn, cv.fold = 5, step = .5)
library(dplyr)
library(ggplot2)
library(pROC)
library(tree)
library(glmnet)
library(rsample)
library(MASS)
library(e1071)
library(randomForest)
library(class)
library(caret)
library(gridExtra)
# import dataset
telcustomer<- read.csv("~/Dropbox/19 Spring/INFSCI_2160_DM/HWs/HW4/WA_Fn-UseC_-Telco-Customer-Churn.csv")
# summary of dataset
summary(telcustomer)
# clearly there is some null values, but it is not too much, therefore, we just simply remove it from dataset
sum(is.na(telcustomer))
telcustomer_cl <- na.omit(telcustomer)
# normalization
telcustomer_cl$MonthlyCharges <- scale(telcustomer_cl$MonthlyCharges)
telcustomer_cl$TotalCharges <- scale(telcustomer_cl$TotalCharges)
# transfter target variable into numeric for later examination
telcustomer_cl$Churn_num <- ifelse(telcustomer_cl$Churn=="Yes",1,0)
summary(telcustomer_cl)
# prepare dataset
# split dataset into train and test partitions
telcustomer_train_test_split <- initial_split(telcustomer_cl,0.8)
telcustomer_train_tbl <- training(telcustomer_train_test_split)
telcustomer_test_tbl <- testing(telcustomer_train_test_split)
# run random forest model on training data
telcustomer_train_rf <- randomForest(formula = Churn_num ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data = telcustomer_train_tbl, importance = TRUE, ntree = 50)
telcustomer_var_importance <- data.frame(importance(telcustomer_train_rf))
telcustomer_var_importance
varImpPlot(telcustomer_train_rf)
# cross-validation
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn_num, cv.fold = 5, step = .5)
with(telcustomer_cvrf, plot(n.var, error.cv, log="x", type="o", lwd=2,
xlab="Number of Variables", ylab="Error Rate"))
# run random forest model on training data
set.seed(1234)
telcustomer_train_rf <- randomForest(formula = Churn_num ~ gender+SeniorCitizen+Partner+Dependents+tenure+PhoneService+MultipleLines+InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+PaymentMethod+MonthlyCharges+TotalCharges, data = telcustomer_train_tbl, importance = TRUE, ntree = 50)
telcustomer_var_importance <- data.frame(importance(telcustomer_train_rf))
telcustomer_var_importance
varImpPlot(telcustomer_train_rf)
# cross-validation
telcustomer_cvrf <- rfcv(telcustomer_train_tbl[,c(2:21)], telcustomer_train_tbl$Churn_num, cv.fold = 5, step = .5)
with(telcustomer_cvrf, plot(n.var, error.cv, log="x", type="o", lwd=2,
xlab="Number of Variables", ylab="Error Rate"))

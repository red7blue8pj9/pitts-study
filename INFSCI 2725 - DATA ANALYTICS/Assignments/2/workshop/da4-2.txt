package DBQuery;

import com.mongodb.AggregationOutput;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Aggregates;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Projections;

import org.bson.Document;

import static com.mongodb.client.model.Accumulators.avg;
import static com.mongodb.client.model.Aggregates.*;
import static com.mongodb.client.model.Projections.excludeId;
import static com.mongodb.client.model.Projections.fields;
import static com.mongodb.client.model.Projections.include;
import static com.mongodb.client.model.Sorts.ascending;
import static com.mongodb.client.model.Sorts.orderBy;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class DBQuery {

    // Create a printer to print out aggreagate iterable documents
    private static void printResult(AggregateIterable<Document> iterable) {
        iterable.forEach(new Block<Document>() {
            public void apply(final Document document) {
                System.out.println(document);
            }
        });
        System.out.println("------------------------------------------------------");
        System.out.println();
    }

    public static void main(String[] args) {
        // Prepare documents
        String dbName = "mydb";
        String collectionName = "tags";

        // Connecting with Mongodb server
        Logger mongoLogger = Logger.getLogger("org.mongodb.driver");
        mongoLogger.setLevel(Level.SEVERE);

        // Mongodb connection
        MongoClient mongoClient = new MongoClient("127.0.0.1", 27017);
        MongoDatabase database = mongoClient.getDatabase(dbName);
        MongoCollection<Document> ratings = database.getCollection(collectionName);
        MongoCollection<Document> tags = database.getCollection(collectionName);
        MongoCollection<Document> movies = database.getCollection(collectionName);

        // Print results
        Block<Document> printBlock = new Block<Document>() {
            @Override
            public void apply(final Document document) {
                System.out.println(document.toJson());
            }
        };

        // 4-2) Show all movie information evaluated by person with Userid of 20


        AggregateIterable<Document> queryOne = tags.aggregate(Arrays.asList(
        		//Use lookup to combine "tags" collection and "movies" collection 
        		Aggregates.lookup("movies","MovieID", "MovieID", "movieInfo"),
        		//Use match to select person with Userid of 20
        	    Aggregates.match(Filters.eq("UserID" , 1024)),
        	    //Use project to filter useful information and output. 
        	    //In this selection, only reserve the attributes "UserID", "MovieID" in "tags", and attributes "Title", "Genres" in "movies"
        	    Aggregates.project(Projections.fields(Projections.include("UserID", "MovieID","movieInfo.Title","movieInfo.Genres"), Projections.excludeId())		)
        	    ));
        	       
        	   printResult(queryOne);
    }